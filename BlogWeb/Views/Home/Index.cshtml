@using BlogWeb.DL.Models
@using BlogWeb.PL.Models
@*@model List<BlogWeb.DL.Models.Category>*@

@model PaginatedList<BlogWeb.DL.Models.Blog>
@{
    ViewData["Title"] = "Anasayfa";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .hero-banner {
        background-image: url(~/sensive/img/blog/blog-slider/blog-slide1.png);
    }
</style>
<main class="site-main">

    <section class="mb-30px">
        <div class="container">
            <div class="hero-banner">
                <div class="hero-banner__content">
                    <h1 id="title"></h1>
                </div>
            </div>
        </div>
    </section>
    @await Component.InvokeAsync("LastPostGet")



    <section class="blog-post-area section-margin mt-4">
        <div class="container">
            <div class="row">
                <div class="col-lg-8">

                    @*   @await Component.InvokeAsync("BlogGet")*@
                    @*  Bloglar burada listelenmeli!*@



                    @foreach (var item in Model)
                    {

                        <div class="single-recent-blog-post">
                            <div class="thumb">
                                <a href="~/MakaleDetay/@item.BlogId"> <img class="img-fluid" src="~/images/@item.ImageUrl"> </a>
                                <ul class="thumb-info">
                                    <li>
                                        <a>
                                            <i class="ti-user"></i>
                                            @{
                                                Context c = new Context();
                                                var result1 = c.User.Where(x => x.UserId == @item.UserId).FirstOrDefault();
                                            }
                                            @result1.FirstName @result1.LastName

                                        </a>
                                    </li>
                                    <li><a><i class="ti-notepad"></i>@item.Date.ToShortDateString()</a></li>
                                    <li>
                                        <a href="~/Home/HomeCategory/@item.CategoryId">
                                            <i class="ti-themify-favicon"></i>
                                            @{

                                                var result = c.Category.Where(x => x.CategoryId == @item.CategoryId).FirstOrDefault();
                                            }
                                            @result.CategoryName

                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="details mt-20">
                                <a href="~/MakaleDetay/@item.BlogId">
                                    <h3>
                                        @item.BlogTitle
                                    </h3>
                                </a>

                                @if (item.Text.Length > 500)
                                {
                                    <p>@Html.Raw(System.Web.HttpUtility.HtmlDecode(item.Text.Substring(0, 500) + " ..." + "  "))</p>
                                }
                                else
                                {
                                    <p>@Html.Raw(System.Web.HttpUtility.HtmlDecode(@item.Text))</p>
                                }

                                <a class="button" href="~/Home/BlogDetail/@item.BlogId">Daha Fazla<i class="ti-arrow-right"></i></a>
                            </div>
                        </div>

                    }

                    @{
                        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
                    }
@*
                    <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex-1)" class="btn btn default @prevDisabled">Previous</a>
                    <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex+1)" class="btn btn default @nextDisabled">Next</a>

*@
                    <div class="row">
                        <div class="col-lg-12">
                            <nav class="blog-pagination justify-content-center d-flex">
                                <ul class="pagination">
                                    <li class="page-item">
                                        <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex-1)" class="page-link @prevDisabled">
                                             <span aria-hidden="true">
                                                
                                                <i class="ti-angle-left"></i> Önceki
                                            </span>
                                        </a>
                                    </li>

                                    <li class="page-item">
                                        <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex+1)" class="page-link @nextDisabled">
                                             <span aria-hidden="true">
                                                Sonraki
                                                <i class="ti-angle-right"></i>
                                            </span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>





                </div>

                <div class="col-lg-4 sidebar-widgets">
                    <div class="widget-wrap">
                        <div class="single-sidebar-widget popular-post-widget">
                            <h4 class="single-sidebar-widget__title">Son Makaleler</h4>
                            @await Component.InvokeAsync("RecentArticlesGet")
                        </div>
                        <!--Category-->
                        @await Component.InvokeAsync("CategoryGet")
                        @*  @await Component.InvokeAsync("SubscriberGet")*@
                    </div>
                </div>
            </div>

        </div>
    </section>

</main>



<script type="text/javascript">
    var i = 0, text;
    text = "Cütopya Forum";
    function typing() {
        if (i < text.length) {
            document.getElementById("title").innerHTML += text.charAt(i);

            i++;
            setTimeout(typing, 50);

        }
    }
    typing();


</script>